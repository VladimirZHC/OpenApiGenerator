# generated by fastapi-codegen:
#   filename:  swagger.yaml
#   timestamp: 2022-04-03T18:41:32+00:00

from __future__ import annotations

from typing import Optional, Union

from fastapi import FastAPI, Path

from .models import (
    GrouppoliciesGetResponse,
    GrouppoliciesGetResponse1,
    GrouppolicyGroupPolicyIdDeleteResponse,
    GrouppolicyGroupPolicyIdDeleteResponse1,
    GrouppolicyGroupPolicyIdGetResponse,
    GrouppolicyGroupPolicyIdGetResponse1,
    GrouppolicyGroupPolicyIdHistoryGetResponse,
    GrouppolicyGroupPolicyIdHistoryGetResponse1,
    GrouppolicyGroupPolicyIdHistoryGphistoryidRollbackPostResponse,
    GrouppolicyGroupPolicyIdHistoryGphistoryidRollbackPostResponse1,
    GrouppolicyGroupPolicyIdHistoryHistoryIdGetResponse,
    GrouppolicyGroupPolicyIdHistoryHistoryIdGetResponse1,
    GrouppolicyGroupPolicyIdPutRequest,
    GrouppolicyGroupPolicyIdPutResponse,
    GrouppolicyGroupPolicyIdPutResponse1,
    GrouppolicyPostRequest,
    GrouppolicyPostResponse,
    GrouppolicyPostResponse1,
    HostHostIdDeleteResponse,
    HostHostIdDeleteResponse1,
    HostHostIdGetResponse,
    HostHostIdGetResponse1,
    HostHostIdPolicyGetResponse,
    HostHostIdPolicyGetResponse1,
    HostHostIdPutRequest,
    HostHostIdPutResponse,
    HostHostIdPutResponse1,
    HostPostRequest,
    HostPostResponse,
    HostPostResponse1,
    HostsGetResponse,
    HostsGetResponse1,
    OrgunitOrgUnitIdDeleteResponse,
    OrgunitOrgUnitIdDeleteResponse1,
    OrgunitOrgUnitIdGetResponse,
    OrgunitOrgUnitIdGetResponse1,
    OrgunitOrgUnitIdPutRequest,
    OrgunitOrgUnitIdPutResponse,
    OrgunitOrgUnitIdPutResponse1,
    OrgunitPostRequest,
    OrgunitPostResponse,
    OrgunitPostResponse1,
    OrgunitsGetResponse,
    OrgunitsGetResponse1,
    SchemaId1,
    SchemaId2,
    SchemaId4,
    SchemaId5,
    SchemaId7,
    SchemaId8,
    SchemaId10,
    SchemaId11,
    SchemaId13,
    SchemaId14,
    SchemaSchemaIdGetResponse,
    SchemaSchemaIdGetResponse1,
    SchemaSchemaIdHistoryGetResponse,
    SchemaSchemaIdHistoryGetResponse1,
    SchemaSchemaIdHistorySchemaHistoryIdGetResponse,
    SchemaSchemaIdHistorySchemaHistoryIdGetResponse1,
    SchemaSchemaIdHistorySchemaHistoryIdRollbackPostResponse,
    SchemaSchemaIdPutRequest,
    SchemaSchemaIdPutResponse,
    SchemaSchemaIdPutResponse1,
    SchemasGetResponse,
    SchemasGetResponse1,
    Type3,
    UserPostRequest,
    UserPostResponse,
    UserPostResponse1,
    UsersGetResponse,
    UsersGetResponse1,
    UserUserIdDeleteResponse,
    UserUserIdDeleteResponse1,
    UserUserIdGetResponse,
    UserUserIdGetResponse1,
    UserUserIdPolicyGetResponse,
    UserUserIdPolicyGetResponse1,
    UserUserIdPutRequest,
    UserUserIdPutResponse,
    UserUserIdPutResponse1,
)

app = FastAPI(
    title='GroupPolicyConstructor API',
    version='0.1',
    description='Test API',
    contact={
        'name': 'GroupPolicyConstructor API',
        'url': 'http://localhost:8000/',
        'email': 'Sluhaivova@gmail.com',
    },
    license={
        'name': 'CC Attribution-ShareAlike 4.0 (CC BY-SA 4.0)',
        'url': 'https://github.com/VladimirZHC',
    },
    servers=[{'url': 'http://localhost:8000', 'description': 'API сервер'}],
)


@app.get(
    '/grouppolicies/',
    response_model=GrouppoliciesGetResponse,
    responses={'500': {'model': GrouppoliciesGetResponse1}},
)
def group_policy_list_data(
    name: Optional[str] = None,
    ordering: Optional[str] = None,
    search: Optional[str] = None,
) -> Union[GrouppoliciesGetResponse, GrouppoliciesGetResponse1]:
    """
    Получить список групповых политик
    """
    pass


@app.post(
    '/grouppolicy/',
    response_model=GrouppolicyPostResponse,
    responses={'500': {'model': GrouppolicyPostResponse1}},
)
def group_policy_post(
    body: GrouppolicyPostRequest,
) -> Union[GrouppolicyPostResponse, GrouppolicyPostResponse1]:
    """
    Создать групповую политику
    """
    pass


@app.get(
    '/grouppolicy/{group_policy_id}/',
    response_model=GrouppolicyGroupPolicyIdGetResponse,
    responses={'500': {'model': GrouppolicyGroupPolicyIdGetResponse1}},
)
def group_policy_i_d(
    group_policy_id: int = Path(..., alias='groupPolicyId')
) -> Union[GrouppolicyGroupPolicyIdGetResponse, GrouppolicyGroupPolicyIdGetResponse1]:
    """
    Получить информацию о групповой политике по идентификатору
    """
    pass


@app.put(
    '/grouppolicy/{group_policy_id}/',
    response_model=GrouppolicyGroupPolicyIdPutResponse,
    responses={'500': {'model': GrouppolicyGroupPolicyIdPutResponse1}},
)
def group_policy_put(
    group_policy_id: int = Path(..., alias='groupPolicyId'),
    body: GrouppolicyGroupPolicyIdPutRequest = ...,
) -> Union[GrouppolicyGroupPolicyIdPutResponse, GrouppolicyGroupPolicyIdPutResponse1]:
    """
    Изменить данные групповой политики по идентификатору
    """
    pass


@app.delete(
    '/grouppolicy/{group_policy_id}/',
    response_model=GrouppolicyGroupPolicyIdDeleteResponse,
    responses={'500': {'model': GrouppolicyGroupPolicyIdDeleteResponse1}},
)
def group_policy_delete(
    group_policy_id: int = Path(..., alias='groupPolicyId')
) -> Union[
    GrouppolicyGroupPolicyIdDeleteResponse, GrouppolicyGroupPolicyIdDeleteResponse1
]:
    """
    Удалить групповую политику по идентификатору
    """
    pass


@app.get(
    '/grouppolicy/{group_policy_id}/history/',
    response_model=GrouppolicyGroupPolicyIdHistoryGetResponse,
    responses={'500': {'model': GrouppolicyGroupPolicyIdHistoryGetResponse1}},
)
def group_policy_i_d_history(
    group_policy_id: int = Path(..., alias='groupPolicyId'),
    name: Optional[str] = None,
    ordering: Optional[str] = None,
    search: Optional[str] = None,
) -> Union[
    GrouppolicyGroupPolicyIdHistoryGetResponse,
    GrouppolicyGroupPolicyIdHistoryGetResponse1,
]:
    """
    Получить данные об истории изменений групповой политики по идентификатору
    """
    pass


@app.post(
    '/grouppolicy/{group_policy_id}/history/{gphistoryid}/rollback/',
    response_model=GrouppolicyGroupPolicyIdHistoryGphistoryidRollbackPostResponse,
    responses={
        '500': {
            'model': GrouppolicyGroupPolicyIdHistoryGphistoryidRollbackPostResponse1
        }
    },
)
def post_grouppolicy_id_history_historyid_rollback(
    group_policy_id: int = Path(..., alias='groupPolicyId'), gphistoryid: int = ...
) -> Union[
    GrouppolicyGroupPolicyIdHistoryGphistoryidRollbackPostResponse,
    GrouppolicyGroupPolicyIdHistoryGphistoryidRollbackPostResponse1,
]:
    """
    Вернуться к конкретному состоянию групповой политики по идентификатору
    """
    pass


@app.get(
    '/grouppolicy/{group_policy_id}/history/{history_id}/',
    response_model=GrouppolicyGroupPolicyIdHistoryHistoryIdGetResponse,
    responses={'500': {'model': GrouppolicyGroupPolicyIdHistoryHistoryIdGetResponse1}},
)
def group_policy_i_d_history_record(
    group_policy_id: int = Path(..., alias='groupPolicyId'),
    history_id: int = Path(..., alias='historyId'),
) -> Union[
    GrouppolicyGroupPolicyIdHistoryHistoryIdGetResponse,
    GrouppolicyGroupPolicyIdHistoryHistoryIdGetResponse1,
]:
    """
    Получить конкретную запись состояния групповой политики по идентификатору
    """
    pass


@app.post(
    '/host/',
    response_model=HostPostResponse,
    responses={'500': {'model': HostPostResponse1}},
)
def host_post(body: HostPostRequest) -> Union[HostPostResponse, HostPostResponse1]:
    """
    Создать компьютер
    """
    pass


@app.get(
    '/host/{host_id}/',
    response_model=HostHostIdGetResponse,
    responses={'500': {'model': HostHostIdGetResponse1}},
)
def host_i_d(
    host_id: int = Path(..., alias='hostId')
) -> Union[HostHostIdGetResponse, HostHostIdGetResponse1]:
    """
    Получить информацию о компьютере по идентификатору
    """
    pass


@app.put(
    '/host/{host_id}/',
    response_model=HostHostIdPutResponse,
    responses={'500': {'model': HostHostIdPutResponse1}},
)
def host_put(
    host_id: int = Path(..., alias='hostId'), body: HostHostIdPutRequest = ...
) -> Union[HostHostIdPutResponse, HostHostIdPutResponse1]:
    """
    Изменить информацию о компьютере по идентификатору
    """
    pass


@app.delete(
    '/host/{host_id}/',
    response_model=HostHostIdDeleteResponse,
    responses={'500': {'model': HostHostIdDeleteResponse1}},
)
def host_delete(
    host_id: int = Path(..., alias='hostId')
) -> Union[HostHostIdDeleteResponse, HostHostIdDeleteResponse1]:
    """
    Удалить компьютер по идентификатору
    """
    pass


@app.get(
    '/host/{host_id}/policy/',
    response_model=HostHostIdPolicyGetResponse,
    responses={'500': {'model': HostHostIdPolicyGetResponse1}},
)
def group_policy_i_d_result(
    host_id: int = Path(..., alias='hostId'),
    name: Optional[str] = None,
    ordering: Optional[str] = None,
    search: Optional[str] = None,
) -> Union[HostHostIdPolicyGetResponse, HostHostIdPolicyGetResponse1]:
    """
    Получить результирующую политику для компьютера
    """
    pass


@app.get(
    '/hosts/',
    response_model=HostsGetResponse,
    responses={'500': {'model': HostsGetResponse1}},
)
def group_policy_list(
    name: Optional[str] = None,
    orgunit: Optional[int] = None,
    search: Optional[str] = None,
) -> Union[HostsGetResponse, HostsGetResponse1]:
    """
    Получить список компьютеров
    """
    pass


@app.post(
    '/orgunit/',
    response_model=OrgunitPostResponse,
    responses={'500': {'model': OrgunitPostResponse1}},
)
def orgunit_data(
    body: OrgunitPostRequest,
) -> Union[OrgunitPostResponse, OrgunitPostResponse1]:
    """
    Создзать новое подразделение
    """
    pass


@app.get(
    '/orgunit/{org_unit_id}/',
    response_model=OrgunitOrgUnitIdGetResponse,
    responses={'500': {'model': OrgunitOrgUnitIdGetResponse1}},
)
def orgunit_i_d(
    org_unit_id: int = Path(..., alias='orgUnitId'),
) -> Union[OrgunitOrgUnitIdGetResponse, OrgunitOrgUnitIdGetResponse1]:
    """
    Получить информацию о подразделении по идентификатору
    """
    pass


@app.put(
    '/orgunit/{org_unit_id}/',
    response_model=OrgunitOrgUnitIdPutResponse,
    responses={'500': {'model': OrgunitOrgUnitIdPutResponse1}},
)
def orgunit_p_u_t(
    org_unit_id: int = Path(..., alias='orgUnitId'),
    body: OrgunitOrgUnitIdPutRequest = None,
) -> Union[OrgunitOrgUnitIdPutResponse, OrgunitOrgUnitIdPutResponse1]:
    """
    Изменить информацию о подразделении по идентификатору
    """
    pass


@app.delete(
    '/orgunit/{org_unit_id}/',
    response_model=OrgunitOrgUnitIdDeleteResponse,
    responses={'500': {'model': OrgunitOrgUnitIdDeleteResponse1}},
)
def orgunit_delete(
    org_unit_id: int = Path(..., alias='orgUnitId'),
) -> Union[OrgunitOrgUnitIdDeleteResponse, OrgunitOrgUnitIdDeleteResponse1]:
    """
    Удалить подразделение по идентификатору
    """
    pass


@app.get(
    '/orgunits/',
    response_model=OrgunitsGetResponse,
    responses={'500': {'model': OrgunitsGetResponse1}},
)
def orgunit_list_data(
    name: Optional[str] = None,
    group_policies: Optional[str] = None,
    ordering: Optional[str] = None,
    search: Optional[str] = None,
) -> Union[OrgunitsGetResponse, OrgunitsGetResponse1]:
    """
    Получить список подразделений
    """
    pass


@app.get(
    '/schema/{schema_id}/',
    response_model=SchemaSchemaIdGetResponse,
    responses={'500': {'model': SchemaSchemaIdGetResponse1}},
)
def schema(
    schema_id: SchemaId2 = Path(..., alias='schemaId'),
) -> Union[SchemaSchemaIdGetResponse, SchemaSchemaIdGetResponse1]:
    """
    Получить схему параметров по идентификатору
    """
    pass


@app.put(
    '/schema/{schema_id}/',
    response_model=SchemaSchemaIdPutResponse,
    responses={'500': {'model': SchemaSchemaIdPutResponse1}},
)
def schema_put(
    schema_id: SchemaId5 = Path(..., alias='schemaId'),
    body: SchemaSchemaIdPutRequest = ...,
) -> Union[SchemaSchemaIdPutResponse, SchemaSchemaIdPutResponse1]:
    """
    Изменить схему параметров по идентификатору
    """
    pass


@app.get(
    '/schema/{schema_id}/history/',
    response_model=SchemaSchemaIdHistoryGetResponse,
    responses={'500': {'model': SchemaSchemaIdHistoryGetResponse1}},
)
def schema_history(
    schema_id: SchemaId8 = Path(..., alias='schemaId'),
    ordering: Optional[str] = None,
    search: Optional[str] = None,
) -> Union[SchemaSchemaIdHistoryGetResponse, SchemaSchemaIdHistoryGetResponse1]:
    """
    Получить данные об истории изменений схемы параметров по идентификатору
    """
    pass


@app.get(
    '/schema/{schema_id}/history/{schema_history_id}/',
    response_model=SchemaSchemaIdHistorySchemaHistoryIdGetResponse,
    responses={'500': {'model': SchemaSchemaIdHistorySchemaHistoryIdGetResponse1}},
)
def schema_history_i_d(
    schema_id: SchemaId11 = Path(..., alias='schemaId'),
    schema_history_id: int = Path(..., alias='schemaHistoryId'),
) -> Union[
    SchemaSchemaIdHistorySchemaHistoryIdGetResponse,
    SchemaSchemaIdHistorySchemaHistoryIdGetResponse1,
]:
    """
    Получить конкретную запись об истории изменений схемы параметров по идентификатору
    """
    pass


@app.post(
    '/schema/{schema_id}/history/{schema_history_id}/rollback',
    response_model=SchemaSchemaIdHistorySchemaHistoryIdRollbackPostResponse,
)
def post_schema_id_history_schemahistoryid_rollback(
    schema_id: SchemaId14 = Path(..., alias='schemaId'),
    schema_history_id: int = Path(..., alias='schemaHistoryId'),
) -> SchemaSchemaIdHistorySchemaHistoryIdRollbackPostResponse:
    pass


@app.get(
    '/schemas/',
    response_model=SchemasGetResponse,
    responses={'500': {'model': SchemasGetResponse1}},
)
def param_schemas_list_data(
    type: Optional[Type3] = None,
) -> Union[SchemasGetResponse, SchemasGetResponse1]:
    """
    Получить схемы данных для политик пользователей и компьютеров
    """
    pass


@app.post(
    '/user/',
    response_model=UserPostResponse,
    responses={'500': {'model': UserPostResponse1}},
)
def user_post(body: UserPostRequest) -> Union[UserPostResponse, UserPostResponse1]:
    """
    Создать пользователя
    """
    pass


@app.get(
    '/user/{user_id}/',
    response_model=UserUserIdGetResponse,
    responses={'500': {'model': UserUserIdGetResponse1}},
)
def user_i_d(
    user_id: int = Path(..., alias='userId'),
) -> Union[UserUserIdGetResponse, UserUserIdGetResponse1]:
    """
    Получить информацию о пользователе по идентификатору
    """
    pass


@app.put(
    '/user/{user_id}/',
    response_model=UserUserIdPutResponse,
    responses={'500': {'model': UserUserIdPutResponse1}},
)
def user_put(
    user_id: int = Path(..., alias='userId'),
    body: UserUserIdPutRequest = ...,
) -> Union[UserUserIdPutResponse, UserUserIdPutResponse1]:
    """
    Изменить информацию о пользователе по идентификатору
    """
    pass


@app.delete(
    '/user/{user_id}/',
    response_model=UserUserIdDeleteResponse,
    responses={'500': {'model': UserUserIdDeleteResponse1}},
)
def user_delete(
    user_id: int = Path(..., alias='userId'),
) -> Union[UserUserIdDeleteResponse, UserUserIdDeleteResponse1]:
    """
    Удалить пользователя  по идентификатору
    """
    pass


@app.get(
    '/user/{user_id}/policy/',
    response_model=UserUserIdPolicyGetResponse,
    responses={'500': {'model': UserUserIdPolicyGetResponse1}},
)
def domain_user_i_d(
    user_id: int = Path(..., alias='userId'),
    name: Optional[str] = None,
    ordering: Optional[str] = None,
    search: Optional[str] = None,
) -> Union[UserUserIdPolicyGetResponse, UserUserIdPolicyGetResponse1]:
    """
    Получить результирующую политику для пользователя
    """
    pass


@app.get(
    '/users/',
    response_model=UsersGetResponse,
    responses={'500': {'model': UsersGetResponse1}},
)
def user_list_data(
    name: Optional[str] = None,
    orgunit: Optional[int] = None,
    search: Optional[str] = None,
) -> Union[UsersGetResponse, UsersGetResponse1]:
    """
    Получить список пользователей
    """
    pass
