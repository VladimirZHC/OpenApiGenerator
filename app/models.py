# generated by fastapi-codegen:
#   filename:  swagger.yaml
#   timestamp: 2022-04-03T18:41:32+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, constr


class GroupPolicy(BaseModel):
    id: Optional[int] = Field(
        None, description='Идентификатор групповой политики', example=1
    )
    name: str = Field(
        ..., description='Имя групповой политики', example='Энергосбережение'
    )
    body: str = Field(
        ...,
        description='Тело групповой политики',
        example='{"user":{"hardware":{"power_mgmt":{"notifications":{"batt_full":"Please unplug"},"screen_timeout":180,"sleep_timeout":600}}}}',
    )


class GroupPolicyHistory(BaseModel):
    id: int = Field(
        ..., description='Идентификатор истории групповой политики\n', example=1
    )
    name: str = Field(
        ..., description='Имя групповой политики', example='Энергосбережение'
    )
    body: str = Field(
        ...,
        description='Тело групповой политики',
        example='{"user":{"hardware":{"power_mgmt":{"notifications":{"batt_full":"Please unplug"},"screen_timeout":180,"sleep_timeout":600}}}}',
    )
    updated: datetime = Field(..., description='Дата изменения')
    history_of: GroupPolicy


class Type(Enum):
    USER = 'USER'
    HOST = 'HOST'


class ParamSchema(BaseModel):
    type: Type = Field(..., description='Тип схемы параметров')
    body: str = Field(
        ...,
        description='Тело параметра',
        example='{"system":{"autorun":{"apps":[{"name":"","cmd":"","icon":""}],"links":[{"name":"","url":""}]},"datetime":{"timezone":"","time_format":""},"env_vars":{"settings":{"source":""},"vars":[{"name":"","value":""}]},"mime_types":{"associations":[{"app":"","types":""}],"mailto":"","http":""}},"desktop":{"start_menu":{"apps":[{"name":"","cmd":"","icon":""}],"links":[{"name":"","url":""}],"folders":[{"name":""}]},"quicklaunch":{"apps":[{"name":"","cmd":"","icon":""}],"links":[{"name":"","url":""}],"folders":[{"name":""}]}},"hardware":{"power_mgmt":{"notifications":{"batt_low":"","batt_full":"","plugged_in":"","unplugged":""},"screen_timeout":600,"lock_when_screen_off":true,"sleep_timeout":1200,"script_timeout":300,"script_after_timeout":""}}}',
    )


class Type1(Enum):
    USER = 'USER'
    HOST = 'HOST'


class ParamSchemaHistory(BaseModel):
    id: Optional[int] = Field(
        None, description='Идентификатор истории схемы параметров'
    )
    type: Type1 = Field(..., description='Тип схемы параметров')
    body: str = Field(
        ...,
        description='Тело параметра запроса',
        example='{"system":{"autorun":{"apps":[{"name":"","cmd":"","icon":""}],"links":[{"name":"","url":""}]},"datetime":{"timezone":"","time_format":""},"env_vars":{"settings":{"source":""},"vars":[{"name":"","value":""}]},"mime_types":{"associations":[{"app":"","types":""}],"mailto":"","http":""}},"desktop":{"start_menu":{"apps":[{"name":"","cmd":"","icon":""}],"links":[{"name":"","url":""}],"folders":[{"name":""}]},"quicklaunch":{"apps":[{"name":"","cmd":"","icon":""}],"links":[{"name":"","url":""}],"folders":[{"name":""}]}},"hardware":{"power_mgmt":{"notifications":{"batt_low":"","batt_full":"","plugged_in":"","unplugged":""},"screen_timeout":600,"lock_when_screen_off":true,"sleep_timeout":1200,"script_timeout":300,"script_after_timeout":""}}}',
    )
    updated: datetime = Field(..., description='Дата обновления')


class ResultPolicy(BaseModel):
    __root__: List[GroupPolicy] = Field(
        ..., description='Массив политик, воздействующих на объект'
    )


class OrgunitsGetResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class Data(BaseModel):
    name: constr(min_length=1)
    parent: int
    group_policies: List[int]


class OrgunitPostRequest(BaseModel):
    data: Data


class OrgunitPostResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class OrgunitOrgUnitIdGetResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class Data1(BaseModel):
    name: constr(min_length=1)
    parent: int
    group_policies: List[int]


class OrgunitOrgUnitIdPutRequest(BaseModel):
    data: Data1


class OrgunitOrgUnitIdPutResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class OrgunitOrgUnitIdDeleteResponse(BaseModel):
    data: Optional[Any] = None
    success: Optional[bool] = None


class OrgunitOrgUnitIdDeleteResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class GrouppoliciesGetResponse(BaseModel):
    data: Optional[List[GroupPolicy]] = None
    success: Optional[bool] = None


class GrouppoliciesGetResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class Data2(BaseModel):
    name: constr(min_length=1)
    body: constr(min_length=1)


class GrouppolicyPostRequest(BaseModel):
    data: Data2


class GrouppolicyPostRequest1(BaseModel):
    pass


class GrouppolicyPostResponse(BaseModel):
    data: Optional[GroupPolicy] = None
    success: Optional[bool] = None


class GrouppolicyPostResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class GrouppolicyGroupPolicyIdGetResponse(BaseModel):
    data: Optional[GroupPolicy] = None
    success: Optional[bool] = Field(None, description='Признак успеха операции')


class GrouppolicyGroupPolicyIdGetResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class Data3(BaseModel):
    name: Optional[str] = None
    body: Optional[str] = None


class GrouppolicyGroupPolicyIdPutRequest(BaseModel):
    data: Optional[Data3] = Field(None, description='Обновляемые поля')


class GrouppolicyGroupPolicyIdPutResponse(BaseModel):
    data: Optional[GroupPolicy] = None
    success: Optional[bool] = Field(None, description='Признак успеха операции')


class GrouppolicyGroupPolicyIdPutResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class GrouppolicyGroupPolicyIdDeleteResponse(BaseModel):
    data: Optional[Any] = None
    success: bool = Field(..., description='Признак успеха операции')


class GrouppolicyGroupPolicyIdDeleteResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class GrouppolicyGroupPolicyIdHistoryGetResponse(BaseModel):
    data: Optional[List[GroupPolicyHistory]] = None
    success: Optional[bool] = Field(None, description='Признак успеха операции')


class GrouppolicyGroupPolicyIdHistoryGetResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class GrouppolicyGroupPolicyIdHistoryHistoryIdGetResponse(BaseModel):
    data: Optional[GroupPolicyHistory] = None
    success: Optional[bool] = Field(None, description='Признак успеха операции')


class GrouppolicyGroupPolicyIdHistoryHistoryIdGetResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class GrouppolicyGroupPolicyIdHistoryGphistoryidRollbackPostResponse(BaseModel):
    data: Optional[GroupPolicy] = None
    success: Optional[bool] = None


class GrouppolicyGroupPolicyIdHistoryGphistoryidRollbackPostResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class UsersGetResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class Data4(BaseModel):
    name: Optional[str] = Field(None, example='Владимир')
    orgunit: Optional[int] = None


class UserPostRequest(BaseModel):
    data: Optional[Data4] = Field(
        None, description='Поля, заполняемые при создании подразделения'
    )


class UserPostResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class UserUserIdGetResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class Data5(BaseModel):
    name: Optional[str] = None
    orgunit: Optional[int] = None


class UserUserIdPutRequest(BaseModel):
    data: Optional[Data5] = Field(None, description='Обновляемые поля')


class UserUserIdPutResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class UserUserIdDeleteResponse(BaseModel):
    data: Optional[Any] = None
    success: bool = Field(..., description='Признак успеха операции')


class UserUserIdDeleteResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class UserUserIdPolicyGetResponse(BaseModel):
    data: Optional[ResultPolicy] = None
    success: Optional[bool] = None


class UserUserIdPolicyGetResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class HostsGetResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class Data6(BaseModel):
    name: Optional[str] = Field(None, example='PC1')
    orgunit: Optional[int] = None


class HostPostRequest(BaseModel):
    data: Optional[Data6] = Field(
        None, description='Поля, заполняемые при создании подразделения'
    )


class HostPostResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class HostHostIdGetResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class Data7(BaseModel):
    name: str
    orgunit: int


class HostHostIdPutRequest(BaseModel):
    data: Data7


class HostHostIdPutResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class HostHostIdDeleteResponse(BaseModel):
    data: Optional[Any] = None
    success: bool = Field(..., description='Признак успеха операции')


class HostHostIdDeleteResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class HostHostIdPolicyGetResponse(BaseModel):
    data: Optional[ResultPolicy] = None
    success: Optional[bool] = None


class HostHostIdPolicyGetResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class Type2(Enum):
    USER = 'USER'
    HOST = 'HOST'


class SchemasGetResponse(BaseModel):
    data: Optional[List[ParamSchema]] = None
    success: Optional[bool] = Field(None, description='Признак успеха операции')


class SchemasGetResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class Type3(Enum):
    USER = 'USER'
    HOST = 'HOST'


class SchemaId(Enum):
    USER = 'USER'
    HOST = 'HOST'


class SchemaSchemaIdGetResponse(BaseModel):
    items: Optional[ParamSchema] = None
    success: Optional[bool] = Field(None, description='Признак успеха операции')


class SchemaSchemaIdGetResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class SchemaId1(Enum):
    USER = 'USER'
    HOST = 'HOST'


class SchemaId2(Enum):
    USER = 'USER'
    HOST = 'HOST'


class SchemaId3(Enum):
    USER = 'USER'
    HOST = 'HOST'


class Data8(BaseModel):
    body: Optional[str] = None


class SchemaSchemaIdPutRequest(BaseModel):
    data: Optional[Data8] = Field(None, description='Обновляемые поля')


class SchemaSchemaIdPutResponse(BaseModel):
    data: Optional[ParamSchema] = None
    success: Optional[bool] = Field(None, description='Признак успеха операции')


class SchemaSchemaIdPutResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class SchemaId4(Enum):
    USER = 'USER'
    HOST = 'HOST'


class SchemaId5(Enum):
    USER = 'USER'
    HOST = 'HOST'


class SchemaId6(Enum):
    USER = 'USER'
    HOST = 'HOST'


class SchemaSchemaIdHistoryGetResponse(BaseModel):
    data: Optional[List[ParamSchemaHistory]] = None
    success: Optional[bool] = Field(None, description='Признак успеха операции')


class SchemaSchemaIdHistoryGetResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class SchemaId7(Enum):
    USER = 'USER'
    HOST = 'HOST'


class SchemaId8(Enum):
    USER = 'USER'
    HOST = 'HOST'


class SchemaId9(Enum):
    USER = 'USER'
    HOST = 'HOST'


class SchemaSchemaIdHistorySchemaHistoryIdGetResponse(BaseModel):
    data: Optional[ParamSchemaHistory] = None
    success: Optional[bool] = Field(None, description='Признак успеха операции')


class SchemaSchemaIdHistorySchemaHistoryIdGetResponse1(BaseModel):
    error: str = Field(..., description='Сообщение об ошибке')
    success: bool = Field(..., description='Результат выполнения операции')


class SchemaId10(Enum):
    USER = 'USER'
    HOST = 'HOST'


class SchemaId11(Enum):
    USER = 'USER'
    HOST = 'HOST'


class SchemaId12(Enum):
    USER = 'USER'
    HOST = 'HOST'


class SchemaSchemaIdHistorySchemaHistoryIdRollbackPostResponse(BaseModel):
    data: Optional[ParamSchema] = None
    success: Optional[bool] = None


class SchemaId13(Enum):
    USER = 'USER'
    HOST = 'HOST'


class SchemaId14(Enum):
    USER = 'USER'
    HOST = 'HOST'


class OrgUnit(BaseModel):
    id: Optional[int] = Field(
        None, description='Идентификатор подразделения\n', example=1
    )
    name: str = Field(..., description='Имя подразделения', example='Отдел контроля')
    parent: Optional[OrgUnit] = None
    group_policies: Optional[List[GroupPolicy]] = None


class DomainUser(BaseModel):
    id: Optional[int] = Field(None, description='Идентификатор пользователя', example=1)
    name: str = Field(..., description='Имя пользователя', example='Владимир')
    login: Optional[constr(regex=r'^[A-Za-z0-9 -_]+')] = Field(
        None, description='Логин пользователя', example='user1'
    )
    orgunit: Optional[OrgUnit] = None


class Host(BaseModel):
    id: Optional[int] = Field(None, description='Идентификатор компьютера', example=1)
    name: str = Field(..., description='Имя компьютера', example='PC1')
    orgunit: Optional[OrgUnit] = None


class OrgunitsGetResponse(BaseModel):
    data: Optional[List[OrgUnit]] = None
    success: Optional[bool] = None


class OrgunitPostResponse(BaseModel):
    data: Optional[OrgUnit] = None
    success: Optional[bool] = None


class OrgunitOrgUnitIdGetResponse(BaseModel):
    data: Optional[OrgUnit] = None
    success: Optional[bool] = None


class OrgunitOrgUnitIdPutResponse(BaseModel):
    data: Optional[OrgUnit] = None
    success: Optional[bool] = None


class UsersGetResponse(BaseModel):
    data: Optional[List[DomainUser]] = None
    success: Optional[bool] = None


class UserPostResponse(BaseModel):
    data: Optional[DomainUser] = None
    success: Optional[bool] = Field(None, description='Признак успеха операции')


class UserUserIdGetResponse(BaseModel):
    data: Optional[DomainUser] = None
    success: Optional[bool] = Field(None, description='Признак успеха операции')


class UserUserIdPutResponse(BaseModel):
    data: Optional[DomainUser] = None
    success: Optional[bool] = Field(None, description='Признак успеха операции')


class HostsGetResponse(BaseModel):
    data: Optional[List[Host]] = None
    success: Optional[bool] = Field(None, description='Признак успеха операции')


class HostPostResponse(BaseModel):
    data: Optional[Host] = None
    success: Optional[bool] = Field(None, description='Признак успеха операции')


class HostHostIdGetResponse(BaseModel):
    data: Optional[Host] = None
    success: Optional[bool] = Field(None, description='Признак успеха операции')


class HostHostIdPutResponse(BaseModel):
    data: Optional[Host] = None
    success: Optional[bool] = Field(None, description='Признак успеха операции')
