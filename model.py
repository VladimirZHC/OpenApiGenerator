# generated by datamodel-codegen:
#   filename:  swagger.yaml
#   timestamp: 2022-04-03T18:29:33+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, constr


class GroupPolicy(BaseModel):
    id: Optional[int] = Field(
        None, description='Идентификатор групповой политики', example=1
    )
    name: str = Field(
        ..., description='Имя групповой политики', example='Энергосбережение'
    )
    body: str = Field(
        ...,
        description='Тело групповой политики',
        example='{"user":{"hardware":{"power_mgmt":{"notifications":{"batt_full":"Please unplug"},"screen_timeout":180,"sleep_timeout":600}}}}',
    )


class GroupPolicyHistory(BaseModel):
    id: int = Field(
        ..., description='Идентификатор истории групповой политики\n', example=1
    )
    name: str = Field(
        ..., description='Имя групповой политики', example='Энергосбережение'
    )
    body: str = Field(
        ...,
        description='Тело групповой политики',
        example='{"user":{"hardware":{"power_mgmt":{"notifications":{"batt_full":"Please unplug"},"screen_timeout":180,"sleep_timeout":600}}}}',
    )
    updated: datetime = Field(..., description='Дата изменения')
    history_of: GroupPolicy


class Type(Enum):
    USER = 'USER'
    HOST = 'HOST'


class ParamSchema(BaseModel):
    type: Type = Field(..., description='Тип схемы параметров')
    body: str = Field(
        ...,
        description='Тело параметра',
        example='{"system":{"autorun":{"apps":[{"name":"","cmd":"","icon":""}],"links":[{"name":"","url":""}]},"datetime":{"timezone":"","time_format":""},"env_vars":{"settings":{"source":""},"vars":[{"name":"","value":""}]},"mime_types":{"associations":[{"app":"","types":""}],"mailto":"","http":""}},"desktop":{"start_menu":{"apps":[{"name":"","cmd":"","icon":""}],"links":[{"name":"","url":""}],"folders":[{"name":""}]},"quicklaunch":{"apps":[{"name":"","cmd":"","icon":""}],"links":[{"name":"","url":""}],"folders":[{"name":""}]}},"hardware":{"power_mgmt":{"notifications":{"batt_low":"","batt_full":"","plugged_in":"","unplugged":""},"screen_timeout":600,"lock_when_screen_off":true,"sleep_timeout":1200,"script_timeout":300,"script_after_timeout":""}}}',
    )


class Type1(Enum):
    USER = 'USER'
    HOST = 'HOST'


class ParamSchemaHistory(BaseModel):
    id: Optional[int] = Field(
        None, description='Идентификатор истории схемы параметров'
    )
    type: Type1 = Field(..., description='Тип схемы параметров')
    body: str = Field(
        ...,
        description='Тело параметра запроса',
        example='{"system":{"autorun":{"apps":[{"name":"","cmd":"","icon":""}],"links":[{"name":"","url":""}]},"datetime":{"timezone":"","time_format":""},"env_vars":{"settings":{"source":""},"vars":[{"name":"","value":""}]},"mime_types":{"associations":[{"app":"","types":""}],"mailto":"","http":""}},"desktop":{"start_menu":{"apps":[{"name":"","cmd":"","icon":""}],"links":[{"name":"","url":""}],"folders":[{"name":""}]},"quicklaunch":{"apps":[{"name":"","cmd":"","icon":""}],"links":[{"name":"","url":""}],"folders":[{"name":""}]}},"hardware":{"power_mgmt":{"notifications":{"batt_low":"","batt_full":"","plugged_in":"","unplugged":""},"screen_timeout":600,"lock_when_screen_off":true,"sleep_timeout":1200,"script_timeout":300,"script_after_timeout":""}}}',
    )
    updated: datetime = Field(..., description='Дата обновления')


class ResultPolicy(BaseModel):
    __root__: List[GroupPolicy] = Field(
        ..., description='Массив политик, воздействующих на объект'
    )


class OrgUnit(BaseModel):
    id: Optional[int] = Field(
        None, description='Идентификатор подразделения\n', example=1
    )
    name: str = Field(..., description='Имя подразделения', example='Отдел контроля')
    parent: Optional[OrgUnit] = None
    group_policies: Optional[List[GroupPolicy]] = None


class DomainUser(BaseModel):
    id: Optional[int] = Field(None, description='Идентификатор пользователя', example=1)
    name: str = Field(..., description='Имя пользователя', example='Владимир')
    login: Optional[constr(regex=r'^[A-Za-z0-9 -_]+')] = Field(
        None, description='Логин пользователя', example='user1'
    )
    orgunit: Optional[OrgUnit] = None


class Host(BaseModel):
    id: Optional[int] = Field(None, description='Идентификатор компьютера', example=1)
    name: str = Field(..., description='Имя компьютера', example='PC1')
    orgunit: Optional[OrgUnit] = None


OrgUnit.update_forward_refs()
